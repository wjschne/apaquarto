{
  "hash": "9f8b15ef41e066a406d0665e482f7386",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to apaquarto\"\nengine: knitr\n---\n\nStyle guides facilitate scientific communication. Because scholars often write about inherently difficult topics, preventing any *avoidable* barriers to communication is all the more necessary. Style guides make information easier to absorb because it is presented in a predictable sequence and a familiar format. Still, in removing unnecessary barriers to communication on the reader's end, style guides themselves often place unnecessary roadblocks before the writer.\n\n[APA style](https://apastyle.apa.org/) is fussier than most discipline-specific guides. Because it was introduced in the pre-computer age [@bentley1929instructions], its quirks and charms resist easy automation. Even after decades of experience, I still need to look things up. Constantly. The basics of APA style are easy enough to learn, but there are a lot of particulars to keep in mind. Not only are there rules and exceptions to rules to remember, there are exceptions to the exceptions that must not be forgotten.\n\nI wrote [apaquarto](https://github.com/wjschne/apaquarto) so that I would never have to worry about APA style ever again. With very little extra effort, your documents are formatted according to APA style. In @fig-manuscript we see an example of apaquarto's output to \"manuscript mode\". Switching the document to \"journal model, produces output formatted like an APA journal (see @fig-journal).\n\n::: {#fig-manuscript fig-cap=\"Example document in manuscript mode\"}\n```{=html}\n<object data=\"example_manuscript.pdf\" type=\"application/pdf\" width=100% height=800 '><p>Unable to display PDF file. <a href=\"example_manuscript.pdf\">Download</a> instead.</p></object>\n```\n:::\n\n::: {#fig-journal fig-cap=\"Example document in journal mode\"}\n```{=html}\n<object data=\"example_journal.pdf\" type=\"application/pdf\" width=100% height=800 '><p>Unable to display PDF file. <a href=\"example_journal.pdf\">Download</a> instead.</p></object>\n```\n:::\n\n# Quarto makes writing scientific documents easier\n\nThe apaquarto extension is built on [Quarto](https://quarto.org/), an open-source publishing system specifically adapted for scientific and technical documents such as journal articles, books, blogs, slides, and dashboards, and websites. Not only does Quarto offer considerable flexibility by itself, it was designed to be extensible. Thus, Quarto can take care of most of the formatting, and an extension can be written to handle whatever specific formatting rules a style guide requires. The apaquarto extension takes care of all the fussy details of APA-style so that you can focus on the content of your writing.\n\n**You do not need to know any programming languages to use Quarto.** You can use it in a completely non-technical way to write well-formatted text, tables, figures, and references. However, if your document communicates the results from data analyses, then Quarto offers you something quite remarkable. You can perform your analyses and communicate your findings in the same file! That is, you write text and code together in a source document and then you \"render\" the document into its final format (e.g., .html, .pdf, .docx). So instead of performing your analyses elsewhere (e.g., SPSS) and then copying the results into a word processor (e.g., MS Word), you build your document in one step.\n\nThe advantages of this kind of workflow are profound. If you discover a mistake in your analysis, there is no need to find and replace the primary results and their downstream consequences scattered throughout the document. Instead, you just re-render the document, and everything in it is updated. When the document is published, the Quarto file serves as a fully reproducible record of your analysis. Making the Quarto file available in a public repository increases trust in your work because anyone can inspect it and trace any result you report back to the source code that created it.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}